{"version":3,"sources":["api/index.js","contexts/LoggedInContext.js","components/navbar/Navbar.jsx","helpers/customizePrice.js","components/singleCoin/SingleCoin.jsx","components/selectCrypto/selectedCoins/SelectedCoins.jsx","components/selectCrypto/cryptoAutoComplete/CryptoAutoComplete.jsx","contexts/SelectedCoinsContext.js","components/selectCrypto/SelectCrypto.jsx","routes/home/Home.js","components/coinDetails/CoinDetails.jsx","routes/singleCoinDetails/SingleCoinDetails.js","components/App.js","serviceWorker.js","index.js"],"names":["api","axios","getSingleCoin","id","get","params","apis","insertCrypto","coinId","post","getSearchList","searchInput","getUser","getSelectedCoins","removeCrypto","logout","LoggedInContext","React","createContext","LoggedInProvider","props","useState","loggedIn","userName","undefined","userImg","user","setUser","useEffect","a","newUser","data","fetchUser","Provider","value","children","useStyles","makeStyles","theme","root","display","alignItems","paper","marginRight","spacing","btn","color","border","textTransform","fontSize","width","menuList","flexDirection","backgroundColor","menuItem","padding","Navbar","useContext","username","profileImg","history","useHistory","classes","open","setOpen","anchorRef","useRef","handleClose","event","target","push","window","location","reload","handleListKeyDown","key","preventDefault","prevOpen","current","focus","className","to","src","alt","Button","ref","aria-controls","aria-haspopup","onClick","Popper","anchorEl","role","transition","disablePortal","TransitionProps","placement","Grow","style","transformOrigin","Paper","ClickAwayListener","onClickAway","MenuList","autoFocusItem","onKeyDown","MenuItem","icon","faSignInAlt","customizePrice","num","price","leftNum","toString","length","slice","substring","SingleCoin","name","rank","symbol","quotes","removeCoin","toggle","SetToggle","USD","volume_24h","percent_change_24h","roundPrice","parseFloat","toFixed","roundVolume_24h","parseInt","CSSTransition","in","timeout","classNames","exact","autosize","height","e","stopPropagation","setTimeout","faTrash","SelectedCoins","selectedCoins","map","coin","CryptoAutoComplete","addCoin","searchCoins","coins","setValue","Autocomplete","noOptionsText","onChange","renderOption","selected","options","getOptionLabel","option","onInputChange","renderInput","TextField","label","variant","fullWidth","SelectedCoinsContext","SelectedCoinsProvider","setSelectedCoins","SelectCrypto","setCoins","userCoins","initialUserCoins","every","newCoin","console","log","newCoins","removeIndex","findIndex","splice","val","currencies","hasOwnProperty","Home","CoinDetails","match","setCoin","selectedCoin","getSelectedCoin","setPercentStyle","percent","total_supply","percent_change_30d","totalCoins","createCoinPallete","SingleCoinDetails","App","path","render","Boolean","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6043d600.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst api = axios;\r\n\r\nconst insertCrypto = (coinId) => api.post(\"/crypto/selected\", { coinId });\r\nconst getSearchList = (searchInput = \"empty\") =>\r\n  api.get(`/crypto/search/${searchInput}`);\r\nconst getSelectedCoins = () => {\r\n  return api.get(\"crypto/getCoins\");\r\n};\r\n\r\nconst removeCrypto = (coinId) => {\r\n  return api.post(\"/crypto/remove\", { coinId });\r\n};\r\n\r\nconst getUser = () => {\r\n  return api.get(\"/auth/user\");\r\n};\r\n\r\nconst logout = () => {\r\n  return api.get(\"/auth/logout\");\r\n};\r\n\r\nconst getSingleCoin = (id) => {\r\n  return api.get(\"/crypto/getsinglecoin\", { params: { id } });\r\n};\r\ngetSingleCoin(\"btc-bitcoin\");\r\nconst apis = {\r\n  insertCrypto,\r\n  getSearchList,\r\n  getUser,\r\n  getSelectedCoins,\r\n  removeCrypto,\r\n  logout,\r\n  getSingleCoin,\r\n};\r\n\r\nexport default apis;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport apis from \"../api\";\r\nconst LoggedInContext = React.createContext();\r\n\r\nconst LoggedInProvider = (props) => {\r\n  const [user, setUser] = useState({\r\n    loggedIn: false,\r\n    userName: undefined,\r\n    userImg: undefined,\r\n  });\r\n  useEffect(() => {\r\n    async function fetchUser() {\r\n      const newUser = (await apis.getUser()).data;\r\n      if (newUser) {\r\n        setUser(newUser);\r\n      }\r\n    }\r\n    fetchUser();\r\n  }, [user.loggedIn]);\r\n  return (\r\n    <LoggedInContext.Provider value={{ user, setUser }}>\r\n      {props.children}\r\n    </LoggedInContext.Provider>\r\n  );\r\n};\r\n\r\nexport { LoggedInProvider, LoggedInContext };\r\n","import React, { useContext } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport apis from \"../../api\";\r\nimport { LoggedInContext } from \"../../contexts/LoggedInContext\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSignInAlt } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Popper from \"@material-ui/core/Popper\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport MenuList from \"@material-ui/core/MenuList\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport \"./Navbar.scss\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n  },\r\n  paper: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  btn: {\r\n    color: \"#fff\",\r\n    border: \"1px solid #fff\",\r\n    textTransform: \"lowercase\",\r\n    fontSize: \"1.4rem\",\r\n    width: \"10rem\",\r\n  },\r\n  menuList: {\r\n    display: \"flex\",\r\n    alignItems: \"stretch\",\r\n    flexDirection: \"column\",\r\n    width: \"10rem\",\r\n    backgroundColor: \"#eee\",\r\n  },\r\n  menuItem: {\r\n    fontSize: \"1.4rem\",\r\n    padding: \"2px 1rem\",\r\n  },\r\n}));\r\n\r\nfunction Navbar() {\r\n  const { user } = useContext(LoggedInContext);\r\n  const { loggedIn, username, profileImg } = user;\r\n  let history = useHistory();\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(false);\r\n  const anchorRef = React.useRef(null);\r\n  const handleToggle = () => {\r\n    setOpen((prevOpen) => !prevOpen);\r\n  };\r\n\r\n  const handleClose = async (event) => {\r\n    if (event.target.id === \"logout-btn\") {\r\n      await apis.logout();\r\n      history.push(\"/\");\r\n      window.location.reload();\r\n    }\r\n    setOpen(false);\r\n  };\r\n\r\n  function handleListKeyDown(event) {\r\n    if (event.key === \"Tab\") {\r\n      event.preventDefault();\r\n      setOpen(false);\r\n    }\r\n  }\r\n\r\n  const prevOpen = React.useRef(open);\r\n\r\n  React.useEffect(() => {\r\n    if (prevOpen.current === true && open === false) {\r\n      if (anchorRef.current) {\r\n        anchorRef.current.focus();\r\n      }\r\n    }\r\n\r\n    prevOpen.current = open;\r\n  }, [open]);\r\n\r\n  return (\r\n    <div className=\"Navbar\">\r\n      <Link to=\"/\">\r\n        <h1 className=\"Navbar_title\">کریپتو یار</h1>\r\n      </Link>\r\n      <div className=\"Navbar_profile\">\r\n        {loggedIn ? (\r\n          <div className={classes.root}>\r\n            <img src={profileImg} className=\"profile_img\" alt=\"user \" />\r\n            <div>\r\n              <Button\r\n                ref={anchorRef}\r\n                aria-controls={open ? \"menu-list-grow\" : undefined}\r\n                aria-haspopup=\"true\"\r\n                onClick={handleToggle}\r\n                className={classes.btn}\r\n              >\r\n                <p>{username} &#9660;</p>\r\n              </Button>\r\n              <Popper\r\n                open={open}\r\n                anchorEl={anchorRef.current}\r\n                role={undefined}\r\n                transition\r\n                disablePortal\r\n              >\r\n                {({ TransitionProps, placement }) => (\r\n                  <Grow\r\n                    {...TransitionProps}\r\n                    style={{\r\n                      transformOrigin:\r\n                        placement === \"bottom\" ? \"center top\" : \"center bottom\",\r\n                    }}\r\n                  >\r\n                    <Paper>\r\n                      <ClickAwayListener onClickAway={handleClose}>\r\n                        <MenuList\r\n                          autoFocusItem={open}\r\n                          id=\"menu-list-grow\"\r\n                          onKeyDown={handleListKeyDown}\r\n                          className={classes.menuList}\r\n                        >\r\n                          <MenuItem\r\n                            className={classes.menuItem}\r\n                            onClick={handleClose}\r\n                          >\r\n                            Account\r\n                          </MenuItem>\r\n                          <MenuItem\r\n                            className={classes.menuItem}\r\n                            onClick={handleClose}\r\n                            id=\"logout-btn\"\r\n                          >\r\n                            Log out\r\n                          </MenuItem>\r\n                        </MenuList>\r\n                      </ClickAwayListener>\r\n                    </Paper>\r\n                  </Grow>\r\n                )}\r\n              </Popper>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <button\r\n            onClick={() => window.open(\"/auth/google\", \"_self\")}\r\n            className=\"profile_login_btn\"\r\n          >\r\n            <FontAwesomeIcon\r\n              icon={faSignInAlt}\r\n              className=\"singinalt_icon login_icon\"\r\n            />\r\n            Log In / Sing Up\r\n          </button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Navbar;\r\n","const customizePrice = (num) => {\r\n  let numStr = num.toString();\r\n  let price = \"\";\r\n  let leftNum = numStr;\r\n  while (3 < leftNum.length) {\r\n    let slicedNum = `,${leftNum.slice(-3)}`;\r\n    price = slicedNum + price;\r\n    leftNum = leftNum.substring(0, leftNum.length - 3);\r\n  }\r\n  price = `${leftNum}${price}`;\r\n  return price;\r\n};\r\n\r\nexport default customizePrice;\r\n","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport customizePrice from \"../../helpers/customizePrice\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport TradingViewWidget from \"react-tradingview-widget\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"./SingleCoin.scss\";\r\n\r\nfunction SingleCoin({ name, rank, symbol, quotes, id, removeCoin }) {\r\n  const [toggle, SetToggle] = useState(true);\r\n  const { price, volume_24h, percent_change_24h } = quotes.USD;\r\n  const roundPrice = parseFloat(price).toFixed(2);\r\n  const roundVolume_24h = customizePrice(parseInt(volume_24h));\r\n\r\n  const handleTrashClick = (e) => {\r\n    e.stopPropagation();\r\n    SetToggle(false);\r\n    setTimeout(() => {\r\n      removeCoin(id);\r\n    }, 300);\r\n  };\r\n  return (\r\n    <CSSTransition in={toggle} timeout={1000} classNames=\"sample\">\r\n      <div className=\"SingleCoin_wrraper\">\r\n        <Link exact=\"true\" to={`/singlecoin/${id}`}>\r\n          <div className=\"SingleCoin\">\r\n            <div className=\"SingleCoin_texts\">\r\n              <div className=\"SingleCoin_name\">\r\n                <p>{name}</p>\r\n                <span> رنک : {rank}</span>\r\n                <p>{symbol} :نماد </p>\r\n              </div>\r\n              <div className=\"SingleCoin_price\">\r\n                <span>قیمت متوسط: {roundPrice}</span>\r\n                <span className=\"price_change\">\r\n                  (24h)تغییر قیمت :\r\n                  <span\r\n                    className=\"price_change--num\"\r\n                    style={\r\n                      percent_change_24h > 0\r\n                        ? { color: \"#2BC36F\" }\r\n                        : { color: \"#F63B45\" }\r\n                    }\r\n                  >\r\n                    {percent_change_24h}\r\n                  </span>\r\n                </span>\r\n                <span>$حجم بازار : {` ${roundVolume_24h}  `} </span>\r\n              </div>\r\n            </div>\r\n            <div className=\" SingleCoin_tradingview\">\r\n              <TradingViewWidget\r\n                symbol={`COINBASE:${symbol}USD`}\r\n                autosize\r\n                height=\"500\"\r\n                style=\"2\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Link>\r\n        <div className=\"SingleCoin_wrraper_trash\" onClick={handleTrashClick}>\r\n          <FontAwesomeIcon icon={faTrash} className=\"trash_icon\" />\r\n        </div>\r\n      </div>\r\n    </CSSTransition>\r\n  );\r\n}\r\nexport default SingleCoin;\r\n","import React from \"react\";\r\nimport SingleCoin from \"../../singleCoin\";\r\nfunction SelectedCoins({ selectedCoins, removeCoin }) {\r\n  return (\r\n    <div>\r\n      {selectedCoins.map((coin) => (\r\n        <SingleCoin key={coin.id} removeCoin={removeCoin} {...coin} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\nexport default SelectedCoins;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport \"./CryptoAutoComplete.scss\";\r\n\r\nfunction CryptoAutoComplete({ addCoin, searchCoins, coins }) {\r\n  let [value, setValue] = useState(\"\");\r\n\r\n  const handleInputchange = (e) => {\r\n    e.preventDefault();\r\n    setValue(e.target.value);\r\n  };\r\n\r\n  const handleChange = (e, coin) => {\r\n    e.preventDefault();\r\n    if (coin) {\r\n      const id = coin.id;\r\n      addCoin(id);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const val = value ? value : \"empty\";\r\n    searchCoins(val);\r\n  }, [value]);\r\n\r\n  return (\r\n    <div className=\"CryptoAutoComplete\">\r\n      <Autocomplete\r\n        noOptionsText=\"No labels\"\r\n        onChange={handleChange}\r\n        renderOption={(coin, { selected }) => (\r\n          <div\r\n            selected={selected}\r\n            id={coin.id}\r\n            className=\"CryptoAutoComplete_listItem\"\r\n          >\r\n            {coin.name}\r\n          </div>\r\n        )}\r\n        options={coins.map((coin) => coin)}\r\n        getOptionLabel={(option) => option.name}\r\n        onInputChange={handleInputchange}\r\n        renderInput={(params) => (\r\n          <TextField\r\n            {...params}\r\n            label=\"crypto search\"\r\n            variant=\"outlined\"\r\n            className=\"Autocomplete_input\"\r\n            fullWidth\r\n          />\r\n        )}\r\n      />\r\n    </div>\r\n  );\r\n}\r\nexport default CryptoAutoComplete;\r\n","import React, { useState } from \"react\";\r\n\r\nexport const SelectedCoinsContext = React.createContext();\r\n\r\nexport function SelectedCoinsProvider(props) {\r\n  const [selectedCoins, setSelectedCoins] = useState([]);\r\n  return (\r\n    <SelectedCoinsContext.Provider value={{ selectedCoins, setSelectedCoins }}>\r\n      {props.children}\r\n    </SelectedCoinsContext.Provider>\r\n  );\r\n}\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport SelectedCoins from \"./selectedCoins\";\r\nimport CryptoAutoComplete from \"./cryptoAutoComplete\";\r\nimport { SelectedCoinsContext } from \"../../contexts/SelectedCoinsContext\";\r\nimport { LoggedInContext } from \"../../contexts/LoggedInContext\";\r\nimport apis from \"../../api\";\r\nimport \"./SelectCrypto.scss\";\r\n\r\nfunction SelectCrypto() {\r\n  const [coins, setCoins] = useState([]);\r\n  const { selectedCoins, setSelectedCoins } = useContext(SelectedCoinsContext);\r\n  const { user } = useContext(LoggedInContext);\r\n\r\n  useEffect(() => {\r\n    if (user.loggedIn) {\r\n      async function initialUserCoins() {\r\n        const userCoins = (await apis.getSelectedCoins()).data;\r\n        setSelectedCoins(userCoins);\r\n      }\r\n      initialUserCoins();\r\n    }\r\n  }, [user.loggedIn]);\r\n\r\n  const addCoin = async (id) => {\r\n    if (selectedCoins.every((coin) => coin.id !== id)) {\r\n      const newCoin = (await apis.insertCrypto(id)).data;\r\n\r\n      if (user.loggedIn) {\r\n        const userCoins = (await apis.getSelectedCoins()).data;\r\n        setSelectedCoins(userCoins);\r\n      } else {\r\n        console.log(\"user is not logged in\");\r\n        setSelectedCoins([...selectedCoins, newCoin]);\r\n      }\r\n    } else {\r\n      console.log(\"this crypto alredy selected\");\r\n    }\r\n  };\r\n\r\n  const removeCoin = async (id) => {\r\n    if (user.loggedIn) {\r\n      await apis.removeCrypto(id);\r\n      const userCoins = (await apis.getSelectedCoins()).data;\r\n      setSelectedCoins(userCoins);\r\n    } else {\r\n      const newCoins = [...selectedCoins];\r\n      const removeIndex = newCoins.findIndex((coin) => coin.id === id);\r\n      newCoins.splice(removeIndex, 1);\r\n      setSelectedCoins(newCoins);\r\n    }\r\n  };\r\n\r\n  const searchCoins = async (val) => {\r\n    let currencies = (await apis.getSearchList(val)).data;\r\n    if (currencies.hasOwnProperty(\"currencies\")) {\r\n      currencies = currencies.currencies;\r\n    }\r\n\r\n    setCoins(currencies);\r\n  };\r\n\r\n  return (\r\n    <div className=\"SelectCrypto\">\r\n      <CryptoAutoComplete\r\n        addCoin={addCoin}\r\n        searchCoins={searchCoins}\r\n        coins={coins}\r\n      />\r\n      <SelectedCoins selectedCoins={selectedCoins} removeCoin={removeCoin} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SelectCrypto;\r\n","import React from \"react\";\r\nimport Navbar from \"../../components/navbar\";\r\nimport SelectCrypto from \"../../components/selectCrypto\";\r\nfunction Home() {\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <SelectCrypto />\r\n    </>\r\n  );\r\n}\r\nexport default Home;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport customizePrice from \"../../helpers/customizePrice\";\r\nimport apis from \"../../api\";\r\nimport TradingViewWidget from \"react-tradingview-widget\";\r\nimport \"./CoinDetails.scss\";\r\n\r\nfunction CoinDetails(props) {\r\n  const { match } = props;\r\n  const { id } = match.params;\r\n  const [coin, setCoin] = useState(undefined);\r\n\r\n  useEffect(() => {\r\n    async function getSelectedCoin() {\r\n      const selectedCoin = (await apis.getSingleCoin(id)).data;\r\n\r\n      setCoin(selectedCoin);\r\n    }\r\n    getSelectedCoin();\r\n  }, [id]);\r\n  const setPercentStyle = (percent) =>\r\n    percent > 0 ? { color: \"#2BC36F\" } : { color: \"#F63B45\" };\r\n\r\n  const createCoinPallete = () => {\r\n    const { name, rank, symbol, quotes, total_supply } = coin;\r\n    const {\r\n      price,\r\n      volume_24h,\r\n      percent_change_24h,\r\n      percent_change_30d,\r\n    } = quotes.USD;\r\n    const roundPrice = parseFloat(price).toFixed(2);\r\n    const roundVolume_24h = customizePrice(parseInt(volume_24h));\r\n    const totalCoins = customizePrice(parseInt(total_supply));\r\n\r\n    return (\r\n      <div className=\"CoinDetails\">\r\n        <div className=\"CoinDetails_text\">\r\n          <div className=\"CoinDetails_name\">\r\n            <p>{name}</p>\r\n            <span> رنک : {rank}</span>\r\n            <p>{symbol} :نماد </p>\r\n          </div>\r\n          <div className=\"CoinDetails_price\">\r\n            <span>قیمت : {roundPrice}</span>\r\n            <span className=\"day_change price_change\">\r\n              (24h)تغییر قیمت :\r\n              <span\r\n                className=\"price_change--num\"\r\n                style={setPercentStyle(percent_change_24h)}\r\n              >\r\n                {percent_change_24h}\r\n              </span>\r\n            </span>\r\n            <span className=\"price_change\">\r\n              تغییر ماهانه :\r\n              <span\r\n                className=\"price_change--num\"\r\n                style={setPercentStyle(percent_change_30d)}\r\n              >{`${percent_change_30d}`}</span>\r\n            </span>\r\n          </div>\r\n          <div className=\"CoinDetails_volume\">\r\n            <span>$حجم بازار : {` ${roundVolume_24h}  `} </span>\r\n            <span>تعداد در گردش:{`${totalCoins}`}</span>\r\n          </div>\r\n        </div>\r\n        <div className=\" CoinDetails_tradingview\">\r\n          <TradingViewWidget symbol={`COINBASE:${symbol}USD`} autosize />\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return <>{coin && createCoinPallete()}</>;\r\n}\r\nexport default CoinDetails;\r\n","import React from \"react\";\r\nimport Navbar from \"../../components/navbar\";\r\nimport CoinDetails from \"../../components/coinDetails\";\r\n\r\nfunction SingleCoinDetails(props) {\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <CoinDetails {...props} />\r\n    </>\r\n  );\r\n}\r\nexport default SingleCoinDetails;\r\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Home from \"../routes/home\";\nimport SingleCoinDetails from \"../routes/singleCoinDetails\";\nimport { SelectedCoinsProvider } from \"../contexts/SelectedCoinsContext\";\nimport { LoggedInProvider } from \"../contexts/LoggedInContext\";\n\nimport \"../assets/sass/global.scss\";\nimport \"./App.scss\";\n\nfunction App() {\n  return (\n    <LoggedInProvider>\n      <SelectedCoinsProvider>\n        <div className=\"App\">\n          <Switch>\n            <Route exact path=\"/\" render={() => <Home />} />\n            <Route\n              exact\n              path=\"/singlecoin/:id\"\n              render={(params) => <SingleCoinDetails {...params} />}\n            />\n            {/* <Route exact path=\"/login\">\n              <button onClick={() => window.open(\"/auth/google\")}></button>\n            </Route> */}\n          </Switch>\n        </div>\n      </SelectedCoinsProvider>\n    </LoggedInProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./index.scss\";\nimport App from \"./components\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}